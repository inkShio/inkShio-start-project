@use 'sass:map';
@use 'sass:meta';
@use 'sass:math';
@use 'variables' as v;
@use 'breakpoints' as b;

// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-row($gutter: v.$grid-gutter-width) {
	--#{v.$prefix}gutter-x: #{$gutter};
	--#{v.$prefix}gutter-y: 0;
	display: flex;
	flex-wrap: wrap;
	// TODO: Revisit calc order after https://github.com/react-bootstrap/react-bootstrap/issues/6039 is fixed
	margin-top: calc(-1 * var(--#{v.$prefix}gutter-y)); // stylelint-disable-line function-disallowed-list
	margin-right: calc(-.5 * var(--#{v.$prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
	margin-left: calc(-.5 * var(--#{v.$prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
}

@mixin make-col-ready() {
	// Add box sizing if only the grid is loaded
	box-sizing: if(meta.variable-exists(include-column-box-sizing) and v.$include-column-box-sizing, border-box, null);
	// Prevent columns from becoming too narrow when at smaller grid tiers by
	// always setting `width: 100%;`. This works because we set the width
	// later on to override this initial width.
	flex-shrink: 0;
	width: 100%;
	max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
	padding-right: calc(var(--#{v.$prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
	padding-left: calc(var(--#{v.$prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
	margin-top: var(--#{v.$prefix}gutter-y);
}

@mixin make-col($size: false, $columns: v.$grid-columns) {
	@if $size {
		flex: 0 0 auto;
		width: math.percentage(math.div($size, $columns));

	}

	@else {
		flex: 1 1 0;
		max-width: 100%;
	}
}

@mixin make-col-auto() {
	flex: 0 0 auto;
	width: auto;
}

@mixin make-col-offset($size, $columns: v.$grid-columns) {
	$num: math.div($size, $columns);
	margin-left: if($num ==0, 0, math.percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// number of columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
	>* {
		flex: 0 0 auto;
		width: math.percentage(math.div(1, $count));
	}
}

// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: v.$grid-columns, $gutter: v.$grid-gutter-width, $breakpoints: v.$grid-breakpoints) {
	@each $breakpoint in map.keys($breakpoints) {
		$infix: b.breakpoint-infix($breakpoint, $breakpoints);

		@include b.media-breakpoint-up($breakpoint, $breakpoints) {

			// Provide basic `.col-{bp}` classes for equal-width flexbox columns
			.col#{$infix} {
				flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
			}

			.row-cols#{$infix}-auto>* {
				@include make-col-auto();
			}

			@if v.$grid-row-columns >0 {
				@for $i from 1 through v.$grid-row-columns {
					.row-cols#{$infix}-#{$i} {
						@include row-cols($i);
					}
				}
			}

			.col#{$infix}-auto {
				@include make-col-auto();
			}

			@if $columns >0 {
				@for $i from 1 through $columns {
					.col#{$infix}-#{$i} {
						@include make-col($i, $columns);
					}
				}

				// `$columns - 1` because offsetting by the width of an entire row isn't possible
				@for $i from 0 through ($columns - 1) {
					@if not ($infix =="" and $i ==0) {

						// Avoid emitting useless .offset-0
						.offset#{$infix}-#{$i} {
							@include make-col-offset($i, $columns);
						}
					}
				}
			}

			// Gutters
			//
			// Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
			@each $key, $value in v.$gutters {

				.g#{$infix}-#{$key},
				.gx#{$infix}-#{$key} {
					--#{v.$prefix}gutter-x: #{$value};
				}

				.g#{$infix}-#{$key},
				.gy#{$infix}-#{$key} {
					--#{v.$prefix}gutter-y: #{$value};
				}
			}
		}
	}
}

@mixin make-cssgrid($columns: v.$grid-columns, $breakpoints: v.$grid-breakpoints) {
	@each $breakpoint in map.keys($breakpoints) {
		$infix: b.breakpoint-infix($breakpoint, $breakpoints);

		@include b.media-breakpoint-up($breakpoint, $breakpoints) {
			@if $columns >0 {
				@for $i from 1 through $columns {
					.g-col#{$infix}-#{$i} {
						grid-column: auto / span $i;
					}
				}

				// Start with `1` because `0` is an invalid value.
				// Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
				@for $i from 1 through ($columns - 1) {
					.g-start#{$infix}-#{$i} {
						grid-column-start: $i;
					}
				}
			}
		}
	}
}