//-
	* Миксин который позволяет использовать миксин в миксине
	*
	* @param {string} mixin название миксина
	* @param {array} params параметры миксина
	*/

//- -
//- 	function pugMixin(mixin, ...params) {
//- 		const len = pug_html.length;
//- 		pug_mixins[mixin](...params);
//- 		const result = pug_html.slice(len);
//- 		pug_html = pug_html.slice(0, len);
//- 		return result;
//- 	}

//-
	* Информация об изображении
	*
	* @param {string} path путь к изображению
	*/

-
	function imageInfo(path) {
		const fileNameExtension = path.replace(/^.*[\\\/]/, ''); // test.jpg
		const filePath = path.replace(fileNameExtension, ''); // ./img/
		const fileFindExtension = fileNameExtension.split('.');
		const fileLength = fileFindExtension.length;
		const fileExtension = fileFindExtension[fileLength - 1]; // jpg
		const fileName = fileNameExtension.replace('.' + fileExtension, ''); // test
		let finalFileExtension = '';
		let info = {
			path: filePath,
			name: fileName,
			ext: fileExtension
		};

		switch (fileExtension) {
			case 'jpg':
			case 'jpeg':
			case 'jfif':
			case 'pjpeg':
			case 'pjp':
				finalFileExtension = 'image/jpeg';
				break;
			case 'png':
				finalFileExtension = 'image/png';
				break;
			case 'avif':
				finalFileExtension = 'image/avif';
				break;
			case 'gif':
				finalFileExtension = 'image/gif';
				break;
			case 'svg':
				finalFileExtension = 'image/svg+xml';
				break;
			case 'webp':
				finalFileExtension = 'image/webp';
				break;
		}
		info.type = finalFileExtension;

		return info;
	}

//-
	* Изображение с использованием picture
	*
	* @param {string} className класс/модификатор
	* @param {string} image путь к изображению, будет взят указанный файл и заменено расширение на webp
	* @param {array} list_images список путей к изображению, первый объект в списке берется как основной
	* @param {string} alt описание
	*/

mixin picture(options, attr)
	- var DEFAULT_OPTIONS = {};
	- DEFAULT_OPTIONS.className = ''
	- DEFAULT_OPTIONS.image = ''
	- DEFAULT_OPTIONS.list_images = []
	- DEFAULT_OPTIONS.alt = ''

	- options = Object.assign({}, DEFAULT_OPTIONS, options || {});

	picture
		if options.image && options.list_images.length === 0
			- const imageMeta = imageInfo(options.image);
			source(type='image/webp', srcset= `${imageMeta.path}${imageMeta.name}.webp`)
			img(class= options.className, src= options.image, alt= options.alt)
		else if !options.image && options.list_images.length > 0
			each item, index in options.list_images
				if index != 0
					- const imageMeta = imageInfo(item);
					source(type= imageMeta.type, srcset= item)
			img(class= options.className, src= options.list_images[0], alt= options.alt)
